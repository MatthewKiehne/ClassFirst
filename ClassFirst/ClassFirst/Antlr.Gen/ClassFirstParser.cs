//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ClassFirst.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ClassFirst {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class ClassFirstParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, TypeName=6, Modifier=7, Class=8, 
		Public=9, Private=10, Assign=11, Int=12, String=13, Identifier=14, Comment=15, 
		Space=16;
	public const int
		RULE_parse = 0, RULE_classDeclaration = 1, RULE_classBlock = 2, RULE_classMember = 3, 
		RULE_classConstructorDeclaration = 4, RULE_block = 5, RULE_statement = 6, 
		RULE_variableDeclaration = 7, RULE_assignment = 8, RULE_fieldDeclaration = 9, 
		RULE_expression = 10;
	public static readonly string[] ruleNames = {
		"parse", "classDeclaration", "classBlock", "classMember", "classConstructorDeclaration", 
		"block", "statement", "variableDeclaration", "assignment", "fieldDeclaration", 
		"expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'('", "','", "')'", null, null, "'class'", "'public'", 
		"'private'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "TypeName", "Modifier", "Class", "Public", 
		"Private", "Assign", "Int", "String", "Identifier", "Comment", "Space"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ClassFirst.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ClassFirstParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ClassFirstParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ClassFirstParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ClassFirstParser.Eof, 0); }
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClassFirstVisitor<TResult> typedVisitor = visitor as IClassFirstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22;
			classDeclaration();
			State = 23;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Public() { return GetToken(ClassFirstParser.Public, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(ClassFirstParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ClassFirstParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassBlockContext classBlock() {
			return GetRuleContext<ClassBlockContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClassFirstVisitor<TResult> typedVisitor = visitor as IClassFirstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_classDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			Match(Public);
			State = 26;
			Match(Class);
			State = 27;
			Match(Identifier);
			State = 28;
			classBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassMemberContext[] classMember() {
			return GetRuleContexts<ClassMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassMemberContext classMember(int i) {
			return GetRuleContext<ClassMemberContext>(i);
		}
		public ClassBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClassFirstVisitor<TResult> typedVisitor = visitor as IClassFirstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBlockContext classBlock() {
		ClassBlockContext _localctx = new ClassBlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_classBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			Match(T__0);
			State = 34;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Modifier || _la==Public) {
				{
				{
				State = 31;
				classMember();
				}
				}
				State = 36;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 37;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassConstructorDeclarationContext classConstructorDeclaration() {
			return GetRuleContext<ClassConstructorDeclarationContext>(0);
		}
		public ClassMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClassFirstVisitor<TResult> typedVisitor = visitor as IClassFirstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberContext classMember() {
		ClassMemberContext _localctx = new ClassMemberContext(Context, State);
		EnterRule(_localctx, 6, RULE_classMember);
		try {
			State = 41;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Modifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 39;
				fieldDeclaration();
				}
				break;
			case Public:
				EnterOuterAlt(_localctx, 2);
				{
				State = 40;
				classConstructorDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassConstructorDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Public() { return GetToken(ClassFirstParser.Public, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(ClassFirstParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(ClassFirstParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TypeName() { return GetTokens(ClassFirstParser.TypeName); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TypeName(int i) {
			return GetToken(ClassFirstParser.TypeName, i);
		}
		public ClassConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classConstructorDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClassFirstVisitor<TResult> typedVisitor = visitor as IClassFirstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassConstructorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassConstructorDeclarationContext classConstructorDeclaration() {
		ClassConstructorDeclarationContext _localctx = new ClassConstructorDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_classConstructorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			Match(Public);
			State = 44;
			Match(Identifier);
			State = 45;
			Match(T__2);
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TypeName) {
				{
				State = 46;
				Match(TypeName);
				State = 47;
				Match(Identifier);
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 48;
					Match(T__3);
					State = 49;
					Match(TypeName);
					State = 50;
					Match(Identifier);
					}
					}
					State = 55;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 58;
			Match(T__4);
			State = 59;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClassFirstVisitor<TResult> typedVisitor = visitor as IClassFirstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			Match(T__0);
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TypeName || _la==Identifier) {
				{
				{
				State = 62;
				statement();
				}
				}
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 68;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClassFirstVisitor<TResult> typedVisitor = visitor as IClassFirstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_statement);
		try {
			State = 72;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TypeName:
				EnterOuterAlt(_localctx, 1);
				{
				State = 70;
				variableDeclaration();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 71;
				assignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TypeName() { return GetToken(ClassFirstParser.TypeName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ClassFirstParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(ClassFirstParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClassFirstVisitor<TResult> typedVisitor = visitor as IClassFirstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_variableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			Match(TypeName);
			State = 75;
			Match(Identifier);
			State = 76;
			Match(Assign);
			State = 77;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ClassFirstParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(ClassFirstParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClassFirstVisitor<TResult> typedVisitor = visitor as IClassFirstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 16, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(Identifier);
			State = 80;
			Match(Assign);
			State = 81;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modifier() { return GetToken(ClassFirstParser.Modifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClassFirstVisitor<TResult> typedVisitor = visitor as IClassFirstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_fieldDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			Match(Modifier);
			State = 84;
			variableDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(ClassFirstParser.Int, 0); }
		public IntExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClassFirstVisitor<TResult> typedVisitor = visitor as IClassFirstVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_expression);
		try {
			_localctx = new IntExpressionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			Match(Int);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,16,89,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,
		5,2,33,8,2,10,2,12,2,36,9,2,1,2,1,2,1,3,1,3,3,3,42,8,3,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,5,4,52,8,4,10,4,12,4,55,9,4,3,4,57,8,4,1,4,1,4,1,4,1,5,
		1,5,5,5,64,8,5,10,5,12,5,67,9,5,1,5,1,5,1,6,1,6,3,6,73,8,6,1,7,1,7,1,7,
		1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,0,0,11,0,2,4,6,8,10,
		12,14,16,18,20,0,0,83,0,22,1,0,0,0,2,25,1,0,0,0,4,30,1,0,0,0,6,41,1,0,
		0,0,8,43,1,0,0,0,10,61,1,0,0,0,12,72,1,0,0,0,14,74,1,0,0,0,16,79,1,0,0,
		0,18,83,1,0,0,0,20,86,1,0,0,0,22,23,3,2,1,0,23,24,5,0,0,1,24,1,1,0,0,0,
		25,26,5,9,0,0,26,27,5,8,0,0,27,28,5,14,0,0,28,29,3,4,2,0,29,3,1,0,0,0,
		30,34,5,1,0,0,31,33,3,6,3,0,32,31,1,0,0,0,33,36,1,0,0,0,34,32,1,0,0,0,
		34,35,1,0,0,0,35,37,1,0,0,0,36,34,1,0,0,0,37,38,5,2,0,0,38,5,1,0,0,0,39,
		42,3,18,9,0,40,42,3,8,4,0,41,39,1,0,0,0,41,40,1,0,0,0,42,7,1,0,0,0,43,
		44,5,9,0,0,44,45,5,14,0,0,45,56,5,3,0,0,46,47,5,6,0,0,47,53,5,14,0,0,48,
		49,5,4,0,0,49,50,5,6,0,0,50,52,5,14,0,0,51,48,1,0,0,0,52,55,1,0,0,0,53,
		51,1,0,0,0,53,54,1,0,0,0,54,57,1,0,0,0,55,53,1,0,0,0,56,46,1,0,0,0,56,
		57,1,0,0,0,57,58,1,0,0,0,58,59,5,5,0,0,59,60,3,10,5,0,60,9,1,0,0,0,61,
		65,5,1,0,0,62,64,3,12,6,0,63,62,1,0,0,0,64,67,1,0,0,0,65,63,1,0,0,0,65,
		66,1,0,0,0,66,68,1,0,0,0,67,65,1,0,0,0,68,69,5,2,0,0,69,11,1,0,0,0,70,
		73,3,14,7,0,71,73,3,16,8,0,72,70,1,0,0,0,72,71,1,0,0,0,73,13,1,0,0,0,74,
		75,5,6,0,0,75,76,5,14,0,0,76,77,5,11,0,0,77,78,3,20,10,0,78,15,1,0,0,0,
		79,80,5,14,0,0,80,81,5,11,0,0,81,82,3,20,10,0,82,17,1,0,0,0,83,84,5,7,
		0,0,84,85,3,14,7,0,85,19,1,0,0,0,86,87,5,12,0,0,87,21,1,0,0,0,6,34,41,
		53,56,65,72
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace ClassFirst
